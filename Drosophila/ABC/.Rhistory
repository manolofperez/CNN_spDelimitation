##load required libraries
library(abc)
##change working directory if necessary
setwd("/Volumes/HD2/manolo/OneDrive/LaGEVol/Artigos_DoutoradoBelManolo/ArtigoDelimitacao/SysBio/Git/Drosophila/ABC ")
##change working directory if necessary
setwd("/Volumes/HD2/manolo/OneDrive/LaGEVol/Artigos_DoutoradoBelManolo/ArtigoDelimitacao/SysBio/Git/Drosophila/ABC")
##load models for each simulation
models<-scan("models_melano_sechellia.txt")
##load simulated summary statistics
sust<-read.table("SuSt_melano_sechellia.txt")
##inform total number of simulations
numsim=20000
##inform total number of loci
numloc=3
##average loci summary statistic values
sust <- data.frame(s1=tapply(sust[,1], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s3=tapply(sust[,3], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s4=tapply(sust[,4], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s5=tapply(sust[,5], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s6=tapply(sust[,6], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s7=tapply(sust[,7], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s8=tapply(sust[,8], factor(rep(1:numsim, each=numloc)), mean,na.rm=T))
##load empirical data
emp<-read.table("Emp_melano_sechellia.txt")
##set number os datasets to one
numsim=1
##average loci summary statistic values
emp <- data.frame(s1=tapply(emp[,1], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s3=tapply(emp[,3], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s4=tapply(emp[,4], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s5=tapply(emp[,5], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s6=tapply(emp[,6], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s7=tapply(emp[,7], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s8=tapply(emp[,8], factor(rep(1:numsim, each=numloc)), mean,na.rm=T))
##Perform a PCA on the simulated datasets
pcasust <- prcomp(sust, scale = TRUE)
##use the calculated eigenvalues to predict PCA values on the empirical dataset
pcaemp<-predict(pcasust, emp, scale=TRUE)
##visualize the summary of the PCA on the simulated dataset
summary(pcasust)
##use the first five axes, as they contained at least 99% of the variance
pcasust<-pcasust$x[,1:5]
##use the same axes for the empirical data
pcaemp<-pcaemp[1:5]
##run the rejection step of ABC with the empirical data, estimating the running time
start_time <- Sys.time()
PCANN.05<-postpr(pcaemp, models, pcasust, tol = 0.05, method = "neuralnet")
end_time <- Sys.time()
PCANN.05_time = end_time - start_time
##visualize the results of the rejection step
summary(PCANN.05)
##run the rejection step of ABC with the empirical data, estimating the running time
start_time <- Sys.time()
PCANN.05<-postpr(pcaemp, models, pcasust, tol = 0.05, method = "neuralnet")
end_time <- Sys.time()
PCANN.05_time = end_time - start_time
##visualize the results of the rejection step
summary(PCANN.05)
##run the rejection step of ABC with the empirical data, estimating the running time
start_time <- Sys.time()
PCANN.05<-postpr(pcaemp, models, pcasust, tol = 0.05, method = "neuralnet")
end_time <- Sys.time()
PCANN.05_time = end_time - start_time
##visualize the results of the rejection step
summary(PCANN.05)
##load models for each simulation
models<-scan("models_melano_simulans.txt")
##load simulated summary statistics
sust<-read.table("SuSt_melano_simulans.txt")
##inform total number of simulations
numsim=20000
##inform total number of loci
numloc=3
##average loci summary statistic values
sust <- data.frame(s1=tapply(sust[,1], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s3=tapply(sust[,3], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s4=tapply(sust[,4], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s5=tapply(sust[,5], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s6=tapply(sust[,6], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s7=tapply(sust[,7], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s8=tapply(sust[,8], factor(rep(1:numsim, each=numloc)), mean,na.rm=T))
##load empirical data
emp<-read.table("Emp_melano_simulans.txt")
##set number os datasets to one
numsim=1
##average loci summary statistic values
emp <- data.frame(s1=tapply(emp[,1], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s3=tapply(emp[,3], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s4=tapply(emp[,4], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s5=tapply(emp[,5], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s6=tapply(emp[,6], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s7=tapply(emp[,7], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s8=tapply(emp[,8], factor(rep(1:numsim, each=numloc)), mean,na.rm=T))
##Perform a PCA on the simulated datasets
pcasust <- prcomp(sust, scale = TRUE)
##use the calculated eigenvalues to predict PCA values on the empirical dataset
pcaemp<-predict(pcasust, emp, scale=TRUE)
##visualize the summary of the PCA on the simulated dataset
summary(pcasust)
##use the first five axes, as they contained at least 99% of the variance
pcasust<-pcasust$x[,1:5]
##use the same axes for the empirical data
pcaemp<-pcaemp[1:5]
##run cross-validation
pca.cv.modsel10K <- cv4postpr(models, pcasust, nval=100, tol=.05, method="neuralnet")
##visualize the results of the cross validation
summary(pca.cv.modsel10K)
##change working directory if necessary
setwd("/Volumes/HD2/manolo/OneDrive/LaGEVol/Artigos_DoutoradoBelManolo/ArtigoDelimitacao/SysBio/Git/Drosophila/ABC")
##load models for each simulation
models<-scan("models_melano_simulans.txt")
##load simulated summary statistics
sust<-read.table("SuSt_melano_simulans.txt")
##inform total number of simulations
numsim=20000
##inform total number of loci
numloc=3
##average loci summary statistic values
sust <- data.frame(s1=tapply(sust[,1], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s3=tapply(sust[,3], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s4=tapply(sust[,4], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s5=tapply(sust[,5], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s6=tapply(sust[,6], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s7=tapply(sust[,7], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s8=tapply(sust[,8], factor(rep(1:numsim, each=numloc)), mean,na.rm=T))
##load empirical data
emp<-read.table("Emp_melano_simulans.txt")
##set number os datasets to one
numsim=1
##average loci summary statistic values
emp <- data.frame(s1=tapply(emp[,1], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s3=tapply(emp[,3], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s4=tapply(emp[,4], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s5=tapply(emp[,5], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s6=tapply(emp[,6], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s7=tapply(emp[,7], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s8=tapply(emp[,8], factor(rep(1:numsim, each=numloc)), mean,na.rm=T))
##Perform a PCA on the simulated datasets
pcasust <- prcomp(sust, scale = TRUE)
##use the calculated eigenvalues to predict PCA values on the empirical dataset
pcaemp<-predict(pcasust, emp, scale=TRUE)
##visualize the summary of the PCA on the simulated dataset
summary(pcasust)
##use the first five axes, as they contained at least 99% of the variance
pcasust<-pcasust$x[,1:5]
##use the same axes for the empirical data
pcaemp<-pcaemp[1:5]
##run the rejection step of ABC with the empirical data, estimating the running time
start_time <- Sys.time()
PCANN.05<-postpr(pcaemp, models, pcasust, tol = 0.05, method = "neuralnet")
end_time <- Sys.time()
PCANN.05_time = end_time - start_time
##visualize the results of the rejection step
summary(PCANN.05)
##visualize running time
PCANN.05_time
##load models for each simulation
models<-scan("models_melano_sechellia.txt")
##load simulated summary statistics
sust<-read.table("SuSt_melano_sechellia.txt")
##inform total number of simulations
numsim=20000
##inform total number of loci
numloc=3
##average loci summary statistic values
sust <- data.frame(s1=tapply(sust[,1], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s3=tapply(sust[,3], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s4=tapply(sust[,4], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s5=tapply(sust[,5], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s6=tapply(sust[,6], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s7=tapply(sust[,7], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s8=tapply(sust[,8], factor(rep(1:numsim, each=numloc)), mean,na.rm=T))
##load empirical data
emp<-read.table("Emp_melano_sechellia.txt")
##set number os datasets to one
numsim=1
##average loci summary statistic values
emp <- data.frame(s1=tapply(emp[,1], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s3=tapply(emp[,3], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s4=tapply(emp[,4], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s5=tapply(emp[,5], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s6=tapply(emp[,6], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s7=tapply(emp[,7], factor(rep(1:numsim, each=numloc)), mean,na.rm=T),
s8=tapply(emp[,8], factor(rep(1:numsim, each=numloc)), mean,na.rm=T))
##Perform a PCA on the simulated datasets
pcasust <- prcomp(sust, scale = TRUE)
##use the calculated eigenvalues to predict PCA values on the empirical dataset
pcaemp<-predict(pcasust, emp, scale=TRUE)
##visualize the summary of the PCA on the simulated dataset
summary(pcasust)
##use the first five axes, as they contained at least 99% of the variance
pcasust<-pcasust$x[,1:5]
##use the same axes for the empirical data
pcaemp<-pcaemp[1:5]
##run cross-validation
pca.cv.modsel10K <- cv4postpr(models, pcasust, nval=100, tol=.05, method="neuralnet")
##visualize the results of the cross validation
summary(pca.cv.modsel10K)
##run the rejection step of ABC with the empirical data, estimating the running time
start_time <- Sys.time()
PCANN.05<-postpr(pcaemp, models, pcasust, tol = 0.05, method = "neuralnet")
end_time <- Sys.time()
PCANN.05_time = end_time - start_time
##visualize the results of the rejection step
summary(PCANN.05)
##visualize running time
PCANN.05_time
